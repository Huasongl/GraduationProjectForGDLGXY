package com.gdlgxy.internshipcommunity.network.networktask;import java.util.Collection;import java.util.Iterator;import java.util.concurrent.BlockingQueue;import java.util.concurrent.TimeUnit;import androidx.annotation.NonNull;import androidx.annotation.Nullable;public class OrderedBlockingQueue<T> implements BlockingQueue<Runnable> {    @Override    public boolean add(Runnable runnable) {        return false;    }    @Override    public boolean offer(Runnable runnable) {        return false;    }    @Override    public Runnable remove() {        return null;    }    @Nullable    @Override    public Runnable poll() {        return null;    }    @Override    public Runnable element() {        return null;    }    @Nullable    @Override    public Runnable peek() {        return null;    }    @Override    public void put(Runnable runnable) throws InterruptedException {    }    @Override    public boolean offer(Runnable runnable, long timeout, TimeUnit unit) throws InterruptedException {        return false;    }    @Override    public Runnable take() throws InterruptedException {        return null;    }    @Override    public Runnable poll(long timeout, TimeUnit unit) throws InterruptedException {        return null;    }    @Override    public int remainingCapacity() {        return 0;    }    @Override    public boolean remove(Object o) {        return false;    }    @Override    public boolean containsAll(@NonNull Collection<?> c) {        return false;    }    @Override    public boolean addAll(@NonNull Collection<? extends Runnable> c) {        return false;    }    @Override    public boolean removeAll(@NonNull Collection<?> c) {        return false;    }    @Override    public boolean retainAll(@NonNull Collection<?> c) {        return false;    }    @Override    public void clear() {    }    @Override    public int size() {        return 0;    }    @Override    public boolean isEmpty() {        return false;    }    @Override    public boolean contains(Object o) {        return false;    }    @NonNull    @Override    public Iterator<Runnable> iterator() {        return null;    }    @NonNull    @Override    public Object[] toArray() {        return new Object[0];    }    @NonNull    @Override    public <T> T[] toArray(@NonNull T[] a) {        return null;    }    @Override    public int drainTo(Collection<? super Runnable> c) {        return 0;    }    @Override    public int drainTo(Collection<? super Runnable> c, int maxElements) {        return 0;    }}