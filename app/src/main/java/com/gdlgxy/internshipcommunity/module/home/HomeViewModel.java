package com.gdlgxy.internshipcommunity.module.home;import android.annotation.SuppressLint;import android.util.Log;import com.alibaba.fastjson.TypeReference;import com.gdlgxy.internshipcommunity.base.BaseViewModel;import com.gdlgxy.internshipcommunity.constant.PageName;import com.gdlgxy.internshipcommunity.login.UserManager;import com.gdlgxy.internshipcommunity.network.ApiResponse;import com.gdlgxy.internshipcommunity.network.ApiService;import com.gdlgxy.internshipcommunity.network.JsonCallback;import com.gdlgxy.internshipcommunity.network.Request;import java.util.ArrayList;import java.util.Collections;import java.util.List;import java.util.concurrent.atomic.AtomicBoolean;import androidx.annotation.NonNull;import androidx.arch.core.executor.ArchTaskExecutor;import androidx.lifecycle.LiveData;import androidx.lifecycle.MutableLiveData;import androidx.paging.DataSource;import androidx.paging.ItemKeyedDataSource;import androidx.paging.PagedList;public class HomeViewModel extends BaseViewModel<HomeTabData> {    private static String TAG = "HomeViewModel";    private volatile boolean mCacheSwitch = true;    private MutableLiveData<PagedList<HomeTabData>> cacheLiveData = new MutableLiveData<>();    private AtomicBoolean mLoadAfter = new AtomicBoolean(false);    private String mFeedType;    @Override    public DataSource createDataSource() {        return new FeedDataSource();    }    public MutableLiveData<PagedList<HomeTabData>> getCacheLiveData() {        return cacheLiveData;    }    public void setFeedType(String feedType) {        mFeedType = feedType;    }    @Override    public String getPageName() {        return null;    }    class FeedDataSource extends ItemKeyedDataSource<Integer, HomeTabData> {        @Override        public void loadInitial(@NonNull LoadInitialParams<Integer> params, @NonNull LoadInitialCallback<HomeTabData> callback) {            Log.d(TAG, "loadInitial: ");            loadData(0, params.requestedLoadSize, callback);            mCacheSwitch = false;        }        @Override        public void loadAfter(@NonNull LoadParams<Integer> params, @NonNull LoadCallback<HomeTabData> callback) {            //向后加载分页数据的            Log.e("homeviewmodel", "loadAfter: ");            loadData(params.key, params.requestedLoadSize, callback);        }        @Override        public void loadBefore(@NonNull LoadParams<Integer> params, @NonNull LoadCallback<HomeTabData> callback) {            callback.onResult(Collections.emptyList());            //能够向前加载数据的        }        @NonNull        @Override        public Integer getKey(@NonNull HomeTabData item) {            return item.id;        }    }    private void loadData(int key, int count, ItemKeyedDataSource.LoadCallback<HomeTabData> callback) {        if (key > 0) {            mLoadAfter.set(true);        }        Request request = ApiService.get("/feeds/queryHotFeedsList")                .addParam("feedType", mFeedType)                .addParam("userId", UserManager.get().getUserId())                .addParam("feedId", key)                .addParam("pageCount", count)                .responseType(new TypeReference<ArrayList<HomeTabData>>() {                }.getType());        if (mCacheSwitch) {            request.cacheStrategy(Request.CACHE_ONLY);            request.execute(new JsonCallback<List<HomeTabData>>() {                @Override                public void onCacheSuccess(ApiResponse<List<HomeTabData>> response) {                    Log.e("loadData", "onCacheSuccess: ");                    MutablePageKeyedDataSource dataSource = new MutablePageKeyedDataSource<HomeTabData>();                    dataSource.data.addAll(response.body);                    PagedList pagedList = dataSource.buildNewPagedList(mConfig);                    cacheLiveData.postValue(pagedList);                    //下面的不可取，否则会报                    // java.lang.IllegalStateException: callback.onResult already called, cannot call again.                    //if (response.body != null) {                    //  callback.onResult(response.body);                    // }                }            });        }        try {            Request netRequest = mCacheSwitch ? request.clone() : request;            netRequest.cacheStrategy(key == 0 ? Request.NET_CACHE : Request.NET_ONLY);            ApiResponse<List<HomeTabData>> response = netRequest.execute();            List<HomeTabData> data = response.body == null ? Collections.emptyList() : response.body;            callback.onResult(data);            if (key > 0) {                //通过BoundaryPageData发送数据 告诉UI层 是否应该主动关闭上拉加载分页的动画                ((MutableLiveData) getBoundaryPageData()).postValue(data.size() > 0);                mLoadAfter.set(false);            }        } catch (CloneNotSupportedException e) {            e.printStackTrace();        }        Log.e("loadData", "loadData: key:" + key);    }    @SuppressLint("RestrictedApi")    public void mLoadAfter(int id, ItemKeyedDataSource.LoadCallback<HomeTabData> callback) {        if (mLoadAfter.get()) {            callback.onResult(Collections.emptyList());            return;        }        ArchTaskExecutor.getIOThreadExecutor().execute(new Runnable() {            @Override            public void run() {                loadData(id, mConfig.pageSize, callback);            }        });    }}