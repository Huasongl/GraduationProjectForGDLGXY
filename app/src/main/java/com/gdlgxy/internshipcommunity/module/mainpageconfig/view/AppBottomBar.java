package com.gdlgxy.internshipcommunity.module.mainpageconfig.view;import android.annotation.SuppressLint;import android.content.Context;import android.content.res.ColorStateList;import android.graphics.Color;import android.util.AttributeSet;import android.view.MenuItem;import com.gdlgxy.internshipcommunity.R;import com.gdlgxy.internshipcommunity.module.mainpageconfig.DestinationConfig;import com.gdlgxy.internshipcommunity.module.mainpageconfig.data.BottomBar;import com.gdlgxy.internshipcommunity.module.mainpageconfig.data.Destination;import com.google.android.material.bottomnavigation.BottomNavigationItemView;import com.google.android.material.bottomnavigation.BottomNavigationMenuView;import com.google.android.material.bottomnavigation.BottomNavigationView;import java.util.List;import androidx.annotation.NonNull;import androidx.annotation.Nullable;public class AppBottomBar extends BottomNavigationView {    private static int[] sIcons = new int[]{            R.drawable.bottom_icon_browser,            R.drawable.bottom_icon_social,            R.drawable.ic_notifications_black_24dp,            R.drawable.bottom_icon_mine};    public AppBottomBar(@NonNull Context context) {        this(context,null);    }    public AppBottomBar(@NonNull Context context, @Nullable AttributeSet attrs) {        this(context, attrs, 0);    }    @SuppressLint("RestrictedApi")    public AppBottomBar(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        BottomBar bottomBar = DestinationConfig.getsBottomBar();        List<BottomBar.Tabs> tabs = bottomBar.tabs;        int [][] states = new int[2][];        states[0] = new int[]{android.R.attr.state_selected};        states[1] = new int[]{};        int[] colors = new int[]{Color.parseColor(bottomBar.getActiveColor()),Color.parseColor(bottomBar.getInActiveColor())};        ColorStateList colorStateList = new ColorStateList(states,colors);        setItemIconTintList(colorStateList);        setItemTextColor(colorStateList);        setLabelVisibilityMode(LABEL_VISIBILITY_LABELED);        setSelectedItemId(bottomBar.getSelectTab());        for (int i= 0; i<tabs.size(); i++){            BottomBar.Tabs tab = tabs.get(i);            if (!tab.enable){                return;            }            int id = getId(tab.pageUrl);            if(id<0){                return;            }            MenuItem item = getMenu().add(0,id,tab.index,tab.title);            item.setIcon(sIcons[tab.index]);        }        for (int i = 0; i<tabs.size(); i++){            BottomBar.Tabs tab = tabs.get(i);            int iconSize = dp2px(tab.size);            BottomNavigationMenuView menuView = (BottomNavigationMenuView) getChildAt(0);            BottomNavigationItemView child = (BottomNavigationItemView) menuView.getChildAt(tab.index);            child.setIconSize(iconSize);        }    }    private int dp2px(int size) {        float value = getContext().getResources().getDisplayMetrics().density*size+0.5f;        return (int) value;    }    public int getId(String pageUrl){        Destination destination = DestinationConfig.getsDestConfig().get(pageUrl);        if (destination == null){            return -1;        }else {            return destination.getId();        }    }}//package com.gdlgxy.internshipcommunity.ui.view;////        import android.annotation.SuppressLint;//        import android.content.Context;//        import android.content.res.ColorStateList;//        import android.graphics.Color;//        import android.text.TextUtils;//        import android.util.AttributeSet;//        import android.util.DisplayMetrics;//        import android.view.MenuItem;////        import com.gdlgxy.internshipcommunity.R;//        import com.gdlgxy.internshipcommunity.ui.DestinationConfig;//        import com.gdlgxy.internshipcommunity.ui.data.BottomBar;//        import com.gdlgxy.internshipcommunity.ui.data.Destination;//        import com.google.android.material.bottomnavigation.BottomNavigationItemView;//        import com.google.android.material.bottomnavigation.BottomNavigationMenuView;//        import com.google.android.material.bottomnavigation.BottomNavigationView;//        import com.google.android.material.bottomnavigation.LabelVisibilityMode;////        import java.util.List;////public class AppBottomBar extends BottomNavigationView {//    private static int[] sIcons = new int[]{R.drawable.ic_home_black_24dp,//            R.drawable.ic_dashboard_black_24dp,//            R.drawable.ic_dashboard_black_24dp,};//    private BottomBar config;////    public AppBottomBar(Context context) {//        this(context, null);//    }////    public AppBottomBar(Context context, AttributeSet attrs) {//        this(context, attrs, 0);//    }////    @SuppressLint("RestrictedApi")//    public AppBottomBar(Context context, AttributeSet attrs, int defStyleAttr) {//        super(context, attrs, defStyleAttr);////        config = DestinationConfig.getsBottomBar();////        int[][] state = new int[2][];//        state[0] = new int[]{android.R.attr.state_selected};//        state[1] = new int[]{};//        int[] colors = new int[]{Color.parseColor(config.getActiveColor()), Color.parseColor(config.getInActiveColor())};//        ColorStateList stateList = new ColorStateList(state, colors);//        setItemTextColor(stateList);//        setItemIconTintList(stateList);//        //LABEL_VISIBILITY_LABELED:设置按钮的文本为一直显示模式//        //LABEL_VISIBILITY_AUTO:当按钮个数小于三个时一直显示，或者当按钮个数大于3个且小于5个时，被选中的那个按钮文本才会显示//        //LABEL_VISIBILITY_SELECTED：只有被选中的那个按钮的文本才会显示//        //LABEL_VISIBILITY_UNLABELED:所有的按钮文本都不显示//        setLabelVisibilityMode(LABEL_VISIBILITY_LABELED);//        List<BottomBar.Tabs> tabs = config.tabs;//        for (BottomBar.Tabs tab : tabs) {//            if (!tab.enable) {//                continue;//            }//            int itemId = getItemId(tab.pageUrl);//            if (itemId < 0) {//                continue;//            }//            MenuItem menuItem = getMenu().add(0, itemId, tab.index, tab.title);//            menuItem.setIcon(sIcons[tab.index]);//        }////        //此处给按钮icon设置大小//        int index = 0;//        for (BottomBar.Tabs tab : config.tabs) {//            if (!tab.enable) {//                continue;//            }////            int itemId = getItemId(tab.pageUrl);//            if (itemId < 0) {//                continue;//            }////            int iconSize = dp2Px(tab.size);//            BottomNavigationMenuView menuView = (BottomNavigationMenuView) getChildAt(0);//            BottomNavigationItemView itemView = (BottomNavigationItemView) menuView.getChildAt(index);//            itemView.setIconSize(iconSize);//            if (TextUtils.isEmpty(tab.title)) {//                int tintColor = TextUtils.isEmpty(tab.tintColor) ? Color.parseColor("#ff678f") : Color.parseColor(tab.tintColor);//                itemView.setIconTintList(ColorStateList.valueOf(tintColor));//                //禁止掉点按时 上下浮动的效果//                itemView.setShifting(false);////                /**//                 * 如果想要禁止掉所有按钮的点击浮动效果。//                 * 那么还需要给选中和未选中的按钮配置一样大小的字号。//                 *//                 *  在MainActivity布局的AppBottomBar标签增加如下配置，//                 *  @style/active，@style/inActive 在style.xml中//                 *  app:itemTextAppearanceActive="@style/active"//                 *  app:itemTextAppearanceInactive="@style/inActive"//                 *///            }//            index++;//        }////        //底部导航栏默认选中项//        if (config.getSelectTab() != 0) {//            BottomBar.Tabs selectTab = config.tabs.get(config.getSelectTab());//            if (selectTab.enable) {//                int itemId = getItemId(selectTab.pageUrl);//                //这里需要延迟一下 再定位到默认选中的tab//                //因为 咱们需要等待内容区域,也就NavGraphBuilder解析数据并初始化完成，//                //否则会出现 底部按钮切换过去了，但内容区域还没切换过去//                post(() -> setSelectedItemId(itemId));//            }//        }//    }////    private int dp2Px(int dpValue) {//        DisplayMetrics metrics = getContext().getResources().getDisplayMetrics();//        return (int) (metrics.density * dpValue + 0.5f);//    }////    private int getItemId(String pageUrl) {//        Destination destination = DestinationConfig.getsDestConfig().get(pageUrl);//        if (destination == null)//            return -1;//        return destination.getId();//    }//}