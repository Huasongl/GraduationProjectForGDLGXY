package com.gdlgxy.internshipcommunity.module.homeimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.ProgressBarimport android.widget.Toastimport androidx.fragment.app.Fragmentimport androidx.lifecycle.ViewModelProviderimport androidx.lifecycle.lifecycleScopeimport androidx.paging.LoadStateimport androidx.recyclerview.widget.RecyclerViewimport androidx.recyclerview.widget.StaggeredGridLayoutManagerimport com.gdlgxy.internshipcommunity.Rimport com.gdlgxy.navannotationmodule.FragmentDestinationimport kotlinx.coroutines.launchimport kotlinx.coroutines.flow.collect@FragmentDestination(pageUrl = "main/module/home", asStarter = true)class HomeFragment : Fragment() {    private val mViewModel by lazy { ViewModelProvider(this).get(HomeViewModel::class.java) }    private val mAdapter = HomeAdapter()    private var mView: View? = null    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        mView = inflater.inflate(R.layout.fragment_acgn, container, false)        return mView    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        val recyclerView = mView!!.rootView.findViewById<RecyclerView>(R.id.recycler_view)        val progressBar = mView!!.rootView.findViewById<ProgressBar>(R.id.progress_bar)        recyclerView.layoutManager =            StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL)        recyclerView.adapter =            mAdapter.withLoadStateFooter(FooterAdapter { mAdapter.retry() })        lifecycleScope.launch {            mViewModel.getPagingData().collect { pagingData ->                mAdapter.submitData(pagingData)            }        }        mAdapter.addLoadStateListener {            when (it.refresh) {                is LoadState.NotLoading -> {                    progressBar.visibility = View.INVISIBLE                    recyclerView.visibility = View.VISIBLE                }                is LoadState.Loading -> {                    progressBar.visibility = View.VISIBLE                    recyclerView.visibility = View.INVISIBLE                }                is LoadState.Error -> {                    val state = it.refresh as LoadState.Error                    progressBar.visibility = View.INVISIBLE                    Toast.makeText(                        context,                        "Load Error: ${state.error.message}",                        Toast.LENGTH_SHORT                    )                        .show()                }            }        }    }}