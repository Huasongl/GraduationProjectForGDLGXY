package com.gdlgxy.internshipcommunity.base;import androidx.annotation.NonNull;import androidx.lifecycle.LiveData;import androidx.lifecycle.MutableLiveData;import androidx.lifecycle.ViewModel;import androidx.paging.DataSource;import androidx.paging.LivePagedListBuilder;import androidx.paging.PagedList;public abstract class BaseViewModel<T> extends ViewModel implements IGetPageName {    protected PagedList.Config mConfig;    private LiveData<PagedList<T>> mPageData;    private DataSource mDataSource;    private MutableLiveData<Boolean> mBoundaryPageData = new MutableLiveData<>();    public BaseViewModel() {        mConfig = new PagedList.Config.Builder().setPageSize(10)                .setInitialLoadSizeHint(12).build();        mPageData = new LivePagedListBuilder(mFactory, mConfig).setInitialLoadKey(0)                .setBoundaryCallback(mCallback).build();    }    PagedList.BoundaryCallback<T> mCallback = new PagedList.BoundaryCallback<T>() {        @Override        public void onZeroItemsLoaded() {            //新提交的PagedList中没有数据            mBoundaryPageData.postValue(false);        }        @Override        public void onItemAtFrontLoaded(@NonNull T itemAtFront) {            //新提交的PagedList中第一条数据被加载到列表上            mBoundaryPageData.postValue(true);        }        @Override        public void onItemAtEndLoaded(@NonNull T itemAtEnd) {            //新提交的PagedList中最后一条数据被加载到列表上        }    };    DataSource.Factory mFactory = new DataSource.Factory() {        @NonNull        @Override        public DataSource create() {            if (mDataSource == null || mDataSource.isInvalid()) {                mDataSource = createDataSource();            }            return mDataSource;        }    };    public LiveData<PagedList<T>> getPageData() {        return mPageData;    }    public DataSource getDataSource() {        return mDataSource;    }    public abstract DataSource createDataSource();    @Override    protected void onCleared() {        super.onCleared();    }    public LiveData<Boolean> getBoundaryPageData() {        return mBoundaryPageData;    }}